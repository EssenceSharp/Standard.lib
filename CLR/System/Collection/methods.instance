	"Instance methods for System.Collection"
		
	protocol: #adding method:
	
	[## addAll: aCollectionOfElements
	
		| targetCollection |
		targetCollection := self asMutable.
		aCollectionOfElements do: [:element | targetCollection add: element].
		^targetCollection
	];
	
	protocol: #binding method:
	
	[## metaValueAt: key ifAbsent: absentBlock
	
			self do: [:each | key = each key ifTrue: [^each value value]].
			^absentBlock value
	];
	
	protocol: #binding method:
	
	[## metaValueAtIndex: index ifAbsent: absentBlock
	
			index > self size ifTrue:  [^absentBlock value].
			index < 1 ifTrue: [^absentBlock value].
			^(self at: index) value
	];
	
	protocol: #comparing method:
	
	[## = comparand
	
		self == comparand ifTrue: [^true].
		^[comparand isEqualToCollection: self]
			on: MessageNotUnderstood
			do: [:ex | false]
	];
	
	protocol: #converting method:
	
	[## asArray
		
		^self toArray asArray
	];
	
	protocol: #copying method:
	
	[## copyAdding: anElement
	
		^self copy add: anElement
	];
	
	protocol: #copying method:
	
	[## copyAddingAll: aCollection
	
		^self copy addAll: aCollection
	];
	
	protocol: #copying method:
	
	[## copyEmpty: capacity
	
		^self class new: capacity
	];
	
	protocol: #copying method:
	
	[## copyWith: anElement
	
		^self copyAdding: anElement
	];
	
	protocol: #copying method:
	
	[## , anElementOrACollectionOfElements
	
		^anElementOrACollectionOfElements addTo: self
	];
	
	protocol: #'double dispatching' method:
	
	[## addTo: aCollection
		^aCollection copyAddingAll: self
	];
	
	protocol: #'double dispatching' method:
	
	[## isEqualToCollection: comparand
	
		self size = comparand size ifFalse: [^false].
		^self isSubsetOf: comparand
	];	
	
	protocol: #'double dispatching' method:
	[## isEqualToSequenceableCollection: comparand
		^self isEqualToCollection: comparand
	];	
	
	protocol: #removing method:
	
	[## copyIdentityRemoving: anElement
	
		^self copyIdentityRemoving: anElement ifAbsent: [self signalElementNotFoundError]
	];
	
	protocol: #removing method:
	
	[## copyIdentityRemoving: anElement ifAbsent: block0
	
		^self copy identityRemove: anElement ifAbsent: block0
	];
	
	protocol: #removing method:
	
	[## copyIdentityRemovingAll: aCollection
	
		| copy |
		copy := self copy.
		copy identityRemoveAll: aCollection.
		^copy
	];
	
	protocol: #removing method:
	
	[## copyRemoving: anElement
	
		^self copyRemoving: anElement ifAbsent: [self signalElementNotFoundError]
	];
	
	protocol: #removing method:
	
	[## copyRemoving: anElement ifAbsent: block0
		^self copy remove: anElement ifAbsent: block0
	];
	
	protocol: #removing method:
	
	[## copyRemovingAll: aCollection
	
		| copy |
		copy := self copy.
		copy removeAll: aCollection.
		^copy
	];
	
	protocol: #removing method:
	
	[## copyRemovingAllSuchThat: predicate
	
		| copy |
		copy := self copy.
		copy removeAllSuchThat: predicate.
		^copy
	];
	
	protocol: #removing method:
	
	[## copyWithout: anElement
		^self copyRemovingAll: anElement
	];
	
	protocol: #removing method:
	
	[## identityRemove: anElement
	
		self identityRemove: anElement ifAbsent: [self signalElementNotFoundError]
	];
	
	protocol: #removing method:
	
	[## identityRemove: anElement ifAbsent: block0
	
		^self subclassResponsibility
	];
	
	protocol: #removing method:
	
	[## identityRemoveAll: aCollection
	
		self removeAllSuchThat: [:element | aCollection identityIncludes: element]
	];
	
	protocol: #removing method:
	
	[## remove: anElement
	
		self remove: anElement ifAbsent: [self signalElementNotFoundError]
	];
	
	protocol: #removing method:
	
	[## remove: anElement ifAbsent: block0
	
		^self subclassResponsibility
	];
	
	protocol: #removing method:
	
	[## removeAll: aCollection
	
		self removeAllSuchThat: [:element | aCollection includes: element]
	];
	
	protocol: #removing method:
	
	[## removeAllSuchThat: predicate
	
		self do: [:element | (predicate value: element) ifTrue: [self identityRemove: element ifAbsent: []]]
	];
	
	protocol: #testing method:
	
	[## isEmpty
	
		^self size isZero
	];
	
	protocol: #testing method:
	
	[## notEmpty
	
		^self size > 0
	]