	"Instance methods for TAnnouncer"	protocol: #announcing method:	[## announce: anAnnouncement				| announcement subscriptions |		announcement := anAnnouncement asAnnouncement.			subscriptions := self subscriptions.		subscriptions ifNotNil: [subscriptions deliver: announcement].		^announcement	];	protocol: #initialization method:	[## initialize			self subscriptions: AnnouncementSubscriptionRegistry new.	];	protocol: #private method:	[## basicSubscribe: subscription			^self subscriptions add: subscription	];	protocol: #private method:	[## replace: subscription with: replacement			^self subscriptions replace: subscription with: replacement	];	protocol: #queries method:	[## hasSubscriber: anObject				self subscriptions subscriptionsOf: anObject do: [:each | ^true].		^false	];	protocol: #queries method:	[## numberOfSubscriptions			^self subscriptions numberOfSubscriptions	];	protocol: #'subscribing-private' method:	[## removeSubscription: subscription					^self subscriptions remove: subscription	];	protocol: #subscribing method:	[## unsubscribe: anObject					self subscriptions removeSubscriber: anObject	];	protocol: #subscribing method:	[## when: anAnnouncementClass do: action			^self subscriptions 			add: (action asAnnouncementSubscription 				announcer: self;				announcementClass: anAnnouncementClass)	];	protocol: #subscribing method:	[## when: anAnnouncementClass do: action for: aSubscriber			^self subscriptions 			add: (action asAnnouncementSubscription 				announcer: self;				announcementClass: anAnnouncementClass;				subscriber: aSubscriber)	];	protocol: #subscribing method:	[## when: anAnnouncementClass send: aSelector to: anObject					^self subscriptions 			add: ((aSelector asMessageSendWithReceiver: anObject) asAnnouncementSubscription				announcer: self;				announcementClass: anAnnouncementClass)	];	protocol: #subscribing method:	[## removeAllSubscriptionsTo: anAnnouncementClass for: aSubscriber			^self subscriptions removeAllSubscriptionsTo: anAnnouncementClass for: aSubscriber	];		protocol: #subscribing method:	[## when: anAnnouncementClass doNotDo: anAction			^self when: anAnnouncementClass doNotDo: anAction	];	protocol: #subscribing method:	[## when: anAnnouncementClass doNotDo: anAction for: aSubscriber			^self subscriptions removeAllSubscriptionsTo: anAnnouncementClass doing: anAction for: aSubscriber	];	protocol: #subscribing method:	[## when: anAnnouncementClass doNotSend: aSelector to: aReceiver			^self subscriptions removeAllSubscriptionsTo: anAnnouncementClass sending: aSelector to: aReceiver	]