	"Configuration of namespace Universal.Types"
	
	"Examples:

	accessPrivilege: #Public; -- The other two valid options would be #InHierarchy or #Local
	import: <namespaceSpec> withAccess: #InHierarchy; -- See below for an explanation of <namespaceSpec>
	importTransitive: <namespaceSpec> withAccess: #Local;
	import: #Global from: <namespaceSpec> as: #LocalName withAccess: #Public


	A <namespaceSpec> is either a variable (local or global) that contains a Namespace (not a Dictionary),
	the name of a Namespace as a Symbol or String, or an instance of a Pathname object.  If it's a Symbol,
	then the symbol may use qualified name syntax (dotted notation) to specify a namespace path.

	Transitive import means that the search will include all the namespaces imported by the imported namespace,
	recursively throughout the namespace import graph, but excluding any namespaces not imported as public.  
	Cycles are handled correctly--they do not cause an error or an infinite loop."

	import: #Boolean 	from: self 	as: #bool 	withAccess: #Public;
	import: #Char 		from: self 	as: #char 	withAccess: #Public;

	import: #Int16 		from: self 	as: #short 	withAccess: #Public;
	import: #UInt16 	from: self 	as: #ushort 	withAccess: #Public;
	import: #Int32 		from: self 	as: #int 	withAccess: #Public;
	import: #UInt32 	from: self 	as: #uint 	withAccess: #Public;
	import: #Int64 		from: self 	as: #long 	withAccess: #Public;
	import: #UInt64 	from: self 	as: #ulong 	withAccess: #Public;
	
	import: #Single 	from: self 	as: #Float 	withAccess: #Public;
	import: #Single 	from: self 	as: #float 	withAccess: #Public;
	import: #Double 	from: self 	as: #Double 	withAccess: #Public;
	import: #Double 	from: self 	as: #double 	withAccess: #Public;
	import: #Decimal 	from: self 	as: #decimal 	withAccess: #Public