	"Instance methods of SmallInteger"
	
	protocol: #'arithmetic-double dispatching' method:
	
	[## sumWithFloat: operand
	
		^operand + self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## differenceFromFloat: operand
	
		^operand - self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## productWithFloat: operand
	
		^operand * self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## ratioToFloat: operand
	
		^operand / self asFloat
	];		
		
	protocol: #'arithmetic-double dispatching' method:
	
	[## integerRatioToFloat: operand
	
		^operand quo: self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## flooredToIntegerRatioToFloat: operand
	
		^operand // self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## remainderFromDividingFloat: operand
	
		^operand rem: self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## residueFromDividingFloat: operand
	
		^operand \\ self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsExponentToFloat: operand
	
		^operand ** self asFloat
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsLogBaseToFloat: operand
	
		^operand log: self asFloat
	];
				
	protocol: #'arithmetic-double dispatching' method:
	
	[## sumWithDouble: operand
	
		^operand + self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## differenceFromDouble: operand
	
		^operand - self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## productWithDouble: operand
	
		^operand * self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## ratioToDouble: operand
	
		^operand / self asDouble
	];		
		
	protocol: #'arithmetic-double dispatching' method:
	
	[## integerRatioToDouble: operand
	
		^operand quo: self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## flooredToIntegerRatioToDouble: operand
	
		^operand // self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## remainderFromDividingDouble: operand
	
		^operand rem: self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## residueFromDividingDouble: operand
	
		^operand \\ self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsExponentToDouble: operand
	
		^operand ** self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsLogBaseToDouble: operand
	
		^operand log: self asDouble
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToSmallInteger: aSmallInteger
	
		^(aSmallInteger - self) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToCharacter: aCharacter
	
		^(aCharacter asInteger - self) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToFloat: aFloat
	
		^(aFloat - self asFloat) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToDouble: aDouble
	
		^(aDouble - self asDouble) sign
	];
			
	protocol: #generality method:
	
	[## withHighestGenerality: operand
	
		"Answers whichever value has the highest generality."
		
		^operand withGeneralityEqualToOrGreaterThanSmallInteger: self
	];
			
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanSmallInteger: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a SmallInteger."
	
		^self
	];
		
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanFloat: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a Float."
	
		^operand
	];
			
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanDouble: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a Double."
	
		^operand
	]