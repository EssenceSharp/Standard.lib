	"Published system primitives for SmallInteger"
	"**** Code generated in order to document built-in system primitives (which may or may not be used by any classes.) So, although the library loader ignores this file, DO NOT MODIFY IT! ****"

	protocol: #'system primitives' method:

	[## class

		<primitive: class domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## isMemberOf: aBehavior 

		<primitive: #isMemberOf: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## isKindOf: aBehavior 

		<primitive: #isKindOf: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## = comparand

		<primitive: #= domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## hash

		<primitive: hash domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## compareTo: comparand 

		<primitive: #compareTo: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## < comparand

		<primitive: #< domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## asCharacter

		<primitive: asCharacter domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## asFloat

		<primitive: asFloat domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## asDouble

		<primitive: asDouble domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## asQuad

		<primitive: asQuad domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## sign

		<primitive: sign domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## isZero

		<primitive: isZero domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## positive

		<primitive: positive domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## negative

		<primitive: negative domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## abs

		<primitive: abs domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## negated

		<primitive: negated domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## + operand

		<primitive: #+ domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## - operand

		<primitive: #- domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## * operand

		<primitive: #* domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## / operand

		<primitive: #/ domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## reciprocal

		<primitive: reciprocal domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## roundTo: operand 

		<primitive: #roundTo: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## truncateTo: modulus 

		<primitive: #truncateTo: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## quo: operand 

		<primitive: #quo: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## // operand

		<primitive: #// domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## rem: operand 

		<primitive: #rem: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## \\ operand

		<primitive: #\\ domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## ** operand

		<primitive: #** domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## log: operand 

		<primitive: #log: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## ln

		<primitive: ln domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## timesRepeat: action 

		<primitive: #timesRepeat: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## to: end do: enumerator 

		<primitive: #to:do: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## to: end by: step do: enumerator 

		<primitive: #to:by:do: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## bitAnd: operand 

		<primitive: #bitAnd: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## bitOr: operand 

		<primitive: #bitOr: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## bitXor: operand 

		<primitive: #bitXor: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## bitShift: operand 

		<primitive: #bitShift: domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## << operand

		<primitive: #<< domain: SmallInteger>
	];

	protocol: #'system primitives' method:

	[## >> operand

		<primitive: #>> domain: SmallInteger>
	];
