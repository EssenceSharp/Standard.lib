	"Instance methods for Float"

	protocol: #'arithmetic-double dispatching' method:
	
	[## differenceFromSmallInteger: operand
	
		^operand asFloat - self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## productWithSmallInteger: operand
	
		^operand asFloat * self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## ratioToSmallInteger: operand
	
		^operand asFloat / self
	];		
		
	protocol: #'arithmetic-double dispatching' method:
	
	[## integerRatioToSmallInteger: operand
	
		^operand asFloat quo: self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## flooredToIntegerRatioToSmallInteger: operand
	
		^operand asFloat // self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## remainderFromDividingSmallInteger: operand
	
		^operand asFloat rem: self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## residueFromDividingSmallInteger: operand
	
		^operand asFloat \\ self
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsExponentToSmallInteger: operand
	
		^operand asFloat ** self
	];

	protocol: #'arithmetic-double dispatching' method:
	[## valueAsLogBaseToSmallInteger: operand
	
		^operand asFloat log: self
	];
	
	protocol: #'arithmetic-double dispatching' method:
	[## sumWithDouble: operand
	
		^operand + self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## differenceFromDouble: operand
	
		^operand - self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## productWithDouble: operand
	
		^operand * self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## ratioToDouble: operand
	
		^operand / self asDouble
	];				

	protocol: #'arithmetic-double dispatching' method:
	
	[## integerRatioToDouble: operand
	
		^operand quo: self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## flooredToIntegerRatioToDouble: operand
	
		^operand // self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## remainderFromDividingDouble: operand
	
		^operand rem: self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## residueFromDividingDouble: operand
	
		^operand \\ self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsExponentToDouble: operand
	
		^operand ** self asDouble
	];

	protocol: #'arithmetic-double dispatching' method:
	
	[## valueAsLogBaseToDouble: operand
	
		^operand log: self asDouble
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToSmallInteger: aSmallInteger
	
		^(aSmallInteger asFloat - self) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToCharacter: aCharacter
	
		^(aCharacter asFloat - self) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToFloat: aFloat
	
		^(aFloat - self) sign
	];
			
	protocol: #'comparing-double dispatch' method:
	
	[## inverseCompareToDouble: aDouble
	
		^(aDouble - self asDouble) sign
	];
		
	protocol: #converting method:
	
	[## coerce: operand
		
		^operand asFloat
	];
			
	protocol: #generality method:
	
	[## withHighestGenerality: operand
	
		"Answers whichever value has the highest generality."
		
		^operand withGeneralityEqualToOrGreaterThanFloat: self
	];
			
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanSmallInteger: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a SmallInteger."
	
		^self
	];
		
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanFloat: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a Float."
	
			^self
	];
		
	protocol: #generality method:
	
	[## withGeneralityEqualToOrGreaterThanDouble: operand
	
		"Answers whichever value has the highest generality. Assumes the operand is a Double."
	
			^operand
	]
	
	
	