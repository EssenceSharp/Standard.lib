	"Instance methods for Number"
	
	protocol: #converting method:
	
	[## asNumber
	
		^self
	];
	
	protocol: #converting method:
	
	[## asReal
	
		^self asDouble
	];
			
	protocol: #converting method:
	
	[## coerce: operand
	
		^operand asNumber
	];
	
	protocol: #'double dispatching' method:
	
	[## integerRatioToSmallInteger: operand
	
		^(self coerce: operand) quo: self
	];

	protocol: #'double dispatching' method:
	
	[## flooredToIntegerRatioToSmallInteger: operand
	
		^(self coerce: operand) // self
	];

	protocol: #'double dispatching' method:
	
	[## remainderFromDividingSmallInteger: operand
	
		^(self coerce: operand) rem: self
	];

	protocol: #'double dispatching' method:
	
	[## residueFromDividingSmallInteger: operand
	
		^(self coerce: operand) \\ self
	];

	protocol: #'double dispatching' method:
	
	[## valueAsExponentToSmallInteger: operand
	
		^(self coerce: operand) ** self
	];

	protocol: #'double dispatching' method:
	
	[## valueAsLogBaseToSmallInteger: operand
	
		^(self coerce: operand) log: self
	];
			
	protocol: #'double dispatching' method:
	
	[## integerRatioToFloat: operand
	
		^(self coerce: operand) quo: self
	];

	protocol: #'double dispatching' method:
	
	[## flooredToIntegerRatioToFloat: operand
	
		^(self coerce: operand) // self
	];

	protocol: #'double dispatching' method:
	
	[## remainderFromDividingFloat: operand
	
		^(self coerce: operand) rem: self
	];

	protocol: #'double dispatching' method:
	
	[## residueFromDividingFloat: operand
	
		^(self coerce: operand) \\ self
	];

	protocol: #'double dispatching' method:
	
	[## valueAsExponentToFloat: operand
	
		^(self coerce: operand) ** self
	];

	protocol: #'double dispatching' method:
	
	[## valueAsLogBaseToFloat: operand
	
		^(self coerce: operand) log: self
	];
	
	protocol: #'double dispatching' method:
	
	[## integerRatioToDouble: operand
	
		^(self coerce: operand) quo: self
	];

	protocol: #'double dispatching' method:
	
	[## flooredToIntegerRatioToDouble: operand
	
		^(self coerce: operand) // self
	];

	protocol: #'double dispatching' method:
	
	[## remainderFromDividingDouble: operand
	
		^(self coerce: operand) rem: self
	];

	protocol: #'double dispatching' method:
	
	[## residueFromDividingDouble: operand
	
		^(self coerce: operand) \\ self
	];

	protocol: #'double dispatching' method:
	
	[## valueAsExponentToDouble: operand
	
		^(self coerce: operand) ** self];

	protocol: #'double dispatching' method:
	
	[## valueAsLogBaseToDouble: operand
	
		^(self coerce: operand) log: self
	];
		
	protocol: #'double dispatching' method:
	
	[## inverseRatioToDuration: aDuration
	
		^aDuration class ticks: aDuration ticks / self
	];
			
	protocol: #durations method:
	
	[## days
	
		^Duration days: self
	];
			
	protocol: #durations method:
	
	[## hours
	
		^Duration hours: self
	];
			
	protocol: #durations method:
	
	[## minutes
	
		^Duration minutes: self
	];
			
	protocol: #durations method:
	
	[## seconds
	
		^Duration seconds: self
	];
			
	protocol: #durations method:
	
	[## milliseconds
	
		^Duration milliseconds: self
	];
			
	protocol: #durations method:
	
	[## microseconds
	
		^Duration microseconds: self
	];
	
	protocol: #testing method:
	
	[## isNumber
	
		^true
	]

