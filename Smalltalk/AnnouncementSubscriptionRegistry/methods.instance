	"Instance methods for AnnouncementSubscriptionRegistry"	protocol: #accessing method:		[## numberOfSubscriptions			^ subscriptions size	];	protocol: #accessing method:		[## replace: prevSubscription with: newSubscription				subscriptions 			remove: prevSubscription;			add: newSubscription.		^newSubscription	];	protocol: #accessing method:		[## subscriptionsHandling: anAnnouncement			| list |		list := OrderedCollection new.		subscriptions do: [:each | (each handles: anAnnouncement) ifTrue: [list add: each]].		^list	];	protocol: #adding method:		[## add: subscription			subscriptions add: subscription	];	protocol: #announcing method:		[## deliver: anAnnouncement			|  subscriptionList |					subscriptions isEmpty ifTrue: [^self].					subscriptionList := self subscriptionsHandling: anAnnouncement.		self deliver: anAnnouncement to: subscriptionList	];	protocol: #initialization method:		[## initialize			self reset	];	protocol: #initialization method:		[## initialize: capacity			self reset: capacity	];	protocol: #'initialize-release' method:		[## reset		subscriptions := Set newForIdentity	];	protocol: #'initialize-release' method:		[## reset: capacity		subscriptions := Set newForIdentity: capacity	];	protocol: #enumerating method:		[## subscriptionsOf: aSubscriber do: enumerator1		(subscriptions select: [:subscription | subscription subscriber == aSubscriber])			do: enumerator1	];	protocol: #private method:		[## deliver: anAnnouncement to: subscriptionList			^ self deliver: anAnnouncement to: subscriptionList startingAt: 1	];	protocol: #private method:		[## deliver: anAnnouncement to: subscriptionList startingAt: startIndex					startIndex to: subscriptionList size do: [:index | 			| subscription |			subscription := subscriptionList at: index.			[subscription deliver: anAnnouncement] 				ifCurtailed: [self deliver: anAnnouncement to: subscriptionList startingAt: index + 1]]	];	protocol: #removing method:		[## remove: subscription			subscriptions remove: subscription ifAbsent: []	];	protocol: #removing method:		[## removeAllSubscriptionsTo: anAnnouncementClass					subscriptions removeAllSuchThat: [:subscription | subscription announcementClass == anAnnouncementClass]	];	protocol: #removing method:		[## removeAllSubscriptionsFor: subscriber					subscriptions removeAllSuchThat: [:subscription | subscription subscriber == subscriber]	];	protocol: #removing method:		[## removeAllSubscriptionsTo: anAnnouncementClass for: aSubscriber					subscriptions removeAllSuchThat: [:subscription | subscription subscriber == aSubscriber and: [subscription announcementClass == anAnnouncementClass]]	];	protocol: #removing method:		[## removeAllSubscriptionsTo: anAnnouncementClass doing: anAction					subscriptions removeAllSuchThat: [:subscription | subscription announcementClass == anAnnouncementClass and: [subscription action = anAction]]	];	protocol: #removing method:		[## removeAllSubscriptionsTo: anAnnouncementClass doing: anAction for: aSubscriber					subscriptions removeAllSuchThat: [:subscription | subscription subscriber == aSubscriber and: [subscription announcementClass == anAnnouncementClass and: [subscription action = anAction]]]	];	protocol: #removing method:		[## removeAllSubscriptionsTo: anAnnouncementClass sending: aSelector to: aSubscriber					subscriptions removeAllSuchThat: [:subscription | subscription subscriber == aSubscriber and: [subscription announcementClass == anAnnouncementClass and: [subscription sends: aSelector]]]	]